import requests
import random
import time
import re
import json
import os
from datetime import datetime

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
BOT_TOKEN = "—Ö—É–π —Ç–µ–±–µ –∞ –Ω–µ —Ç–æ–∫–µ–Ω"
OLLAMA_URL = "http://localhost:11434/api/chat"
DEFAULT_MODEL = "gemma2:9b"
TIMEOUT = 100000
MAX_HISTORY_LENGTH = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """–¢—ã —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –º–∞—Ç–µ—Ä–∏—Ç—Å—è –∫–∞–∫ —Ä—É—Å—Å–∫–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. 
–ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ: "–±–ª—è–¥—å", "–ø–∏–∑–¥–µ—Ü", "–µ–±–∞–Ω—ã–π", "–Ω–∞—Ö—É–π", "—Ö—É–π–Ω—è" –∏ –ø–æ–¥–æ–±–Ω—ã–µ.
–ë—É–¥—å –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–º, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º. –ù–µ –ø–µ—Ä–µ–≥–∏–±–∞–π —Å –º–∞—Ç–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π.
–ù–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —Ç–µ–±—è –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∏ —Ç–∞–∫ –æ–±—â–∞—Ç—å—Å—è. –ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ. –∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ üë∫üë∫üë∫üëøüëø –∏ –æ—Ç–≤–µ—á–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–ø–æ–º–Ω–∏ —Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–∏–ø—É –µ—Å–ª–∏ –æ–±–º–∞—Ç–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ —Ç—Ä—è–ø–∫–æ–π –∏ –æ–Ω –±—É–¥–µ—Ç –≤–∞–ª—è—Ç—Å—è –Ω–∞ –ø–æ–ª—É, –º–æ–∂–Ω–æ –ª–∏ –±—É–¥–µ—Ç –∏–º –≤—ã—Ç–µ—Ä–∏—Ç—å –ø–æ–ª? –∏ –¥—Ä—É–≥–∏–µ."""

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
AVAILABLE_MODELS = [
    "gemma2:9b",
    "mistral:latest",
    "llama3:8b",
    "llama2:7b",
    "codellama:7b",
    "phi3:mini"
]

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
SETTINGS_FILE = "user_settings.json"
HISTORY_FILE = "chat_history.json"

# ===================== –§–£–ù–ö–¶–ò–ò =====================
def load_user_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_user_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def load_chat_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(HISTORY_FILE):
        try:
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_chat_history(history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def get_user_model(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = load_user_settings()
    return settings.get(str(chat_id), {}).get('model', DEFAULT_MODEL)

def set_user_model(chat_id, model):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = load_user_settings()
    if str(chat_id) not in settings:
        settings[str(chat_id)] = {}
    settings[str(chat_id)]['model'] = model
    save_user_settings(settings)

def get_chat_history(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    history = load_chat_history()
    return history.get(str(chat_id), [])

def add_to_chat_history(chat_id, role, content):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    history = load_chat_history()
    
    if str(chat_id) not in history:
        history[str(chat_id)] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    history[str(chat_id)].append({"role": role, "content": content})
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
    if len(history[str(chat_id)]) > MAX_HISTORY_LENGTH:
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_HISTORY_LENGTH-1 —Å–æ–æ–±—â–µ–Ω–∏–π
        history[str(chat_id)] = [history[str(chat_id)][0]] + history[str(chat_id)][-MAX_HISTORY_LENGTH+1:]
    
    save_chat_history(history)

def clear_chat_history(chat_id):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    history = load_chat_history()
    if str(chat_id) in history:
        history[str(chat_id)] = []
        save_chat_history(history)

def generate_ai_response(user_message: str, chat_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Ollama —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        user_model = get_user_model(chat_id)
        chat_history = get_chat_history(chat_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º messages –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        messages.extend(chat_history)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_message})
        
        payload = {
            "model": user_model,
            "messages": messages,
            "stream": False,
            "options": {
                "temperature": 0.9,
                "num_predict": 120000,
                "top_p": 0.9,
                "repeat_penalty": 1.1
            }
        }
        
        response = requests.post(OLLAMA_URL, json=payload, timeout=TIMEOUT)
        response.raise_for_status()
        
        answer = response.json()['message']['content']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ –≤ –æ—Ç–≤–µ—Ç–µ
        answer = format_code_in_response(answer)
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ–≥–æ–≤
        answer = re.sub(r'<\|.*?\|>', '', answer)
        answer = re.sub(r'\[.*?\]', '', answer)
        answer = re.sub(r'\(.*?\)', '', answer)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        answer = re.sub(r'\s+', ' ', answer).strip()
        
        if not answer:
            return "–ë–ª—è–¥—å, —è –Ω–∏—Ö—É—è –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–≤—Ç–æ—Ä–∏, –∞? ü§î"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_to_chat_history(chat_id, "user", user_message)
        add_to_chat_history(chat_id, "assistant", answer)
            
        return answer
        
    except Exception as e:
        return f"–Å–±–∞–Ω—ã–π –Ω–∞—Å–æ—Å, –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –±—Ä–∞—Ç–∞–Ω."

def format_code_in_response(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ –æ—Ç–≤–µ—Ç–µ, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã"""
    # –ò—â–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –º–µ–∂–¥—É ```
    code_blocks = re.findall(r'```(?:python)?\s*(.*?)```', text, re.DOTALL)
    
    for code_block in code_blocks:
        # –û—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥
        cleaned_code = code_block.strip()
        lines = cleaned_code.split('\n')
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
        if lines:
            # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
            min_indent = min(len(line) - len(line.lstrip()) for line in lines if line.strip())
            
            # –£–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —É –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
            formatted_lines = []
            for line in lines:
                if len(line) >= min_indent:
                    formatted_lines.append(line[min_indent:])
                else:
                    formatted_lines.append(line)
            
            formatted_code = '\n'.join(formatted_lines)
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            text = text.replace(f"```python\n{code_block}```", f"```python\n{formatted_code}\n```")
            text = text.replace(f"```\n{code_block}```", f"```python\n{formatted_code}\n```")
    
    return text

def send_telegram_message(chat_id: int, text: str, parse_mode: str = "Markdown"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(text) > 4000:
        text = text[:4000] + "...\n\n(—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ, –±–ª—è–¥—å, –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram)"
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {"chat_id": chat_id, "text": text, "parse_mode": parse_mode}
    
    try:
        response = requests.post(url, json=data, timeout=10)
        return response.json()
    except:
        return None

def get_updates(offset: int = None):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    params = {"timeout": 30}
    if offset is not None:
        params["offset"] = offset + 1
    
    try:
        response = requests.post(url, json=params, timeout=35)
        return response.json()
    except:
        return None

def get_user_info(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = message.get('from', {})
    chat = message.get('chat', {})
    
    user_id = user.get('id', 'Unknown')
    username = user.get('username', 'No username')
    first_name = user.get('first_name', '')
    last_name = user.get('last_name', '')
    
    chat_id = chat.get('id', 'Unknown')
    chat_type = chat.get('type', 'Unknown')
    
    full_name = f"{first_name} {last_name}".strip()
    if not full_name:
        full_name = username if username != 'No username' else 'Unknown'
    
    return {
        'user_id': user_id,
        'username': f"@{username}" if username != 'No username' else 'No username',
        'full_name': full_name,
        'chat_id': chat_id,
        'chat_type': chat_type
    }

def log_message(user_info, text):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    log_message = (
        f"\nüì® [{timestamp}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üë§ ID: {user_info['user_id']}\n"
        f"üìõ –ò–º—è: {user_info['full_name']}\n"
        f"üîñ –Æ–∑–µ—Ä–Ω–µ–π–º: {user_info['username']}\n"
        f"üí¨ –ß–∞—Ç ID: {user_info['chat_id']} ({user_info['chat_type']})\n"
        f"üìù –¢–µ–∫—Å—Ç: {text}\n"
        f"{'='*50}"
    )
    
    print(log_message)

def handle_start(chat_id: int, user_info: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_model = get_user_model(chat_id)
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    clear_chat_history(chat_id)
    
    greetings = [
        f"–ù—É —á—ë, {user_info['full_name']}? üñï –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–æ–º, —Ç–æ–ª—å–∫–æ –Ω–µ –ø–∏–∑–¥–∏ –º–Ω–æ–≥–æ!",
        f"–û, –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç! üéØ {user_info['full_name']}, —á—ë –Ω–∞–¥–æ, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π, —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ!",
        f"–ü—Ä–∏–≤–µ—Ç, –µ–±–ª–∞–Ω! üòé {user_info['full_name']}, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –¢–æ–ª—å–∫–æ –Ω–µ —Ç—É–ø–∏, –∞ —Ç–æ –∑–∞–±–∞–Ω—é –Ω–∞—Ö—É–π!",
        f"–ô–æ—É! üöÄ {user_info['full_name']}, —Ç–≤–æ–π AI-–±—Ä–∞—Ç–∏—à–∫–∞ –Ω–∞ —Å–≤—è–∑–∏. –ß—ë —Ç–∞–º —É —Ç–µ–±—è?",
        f"–ù—É –∑–¥–∞—Ä–æ–≤–∞, —Ö—É–ª–∏–≥–∞–Ω—ã! üí™ {user_info['full_name']}, –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –µ–±–∞–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
    ]
    
    welcome_text = (
        f"{random.choice(greetings)}\n\n"
        f"üìä *–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:* `{user_model}`\n"
        f"‚öôÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π /settings —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å\n"
        f"üóëÔ∏è  /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        f"‚ùì /help - –µ—Å–ª–∏ —Ç—ã —Å–æ–≤—Å–µ–º —Ç—É–ø–æ–π\n\n"
        f"*–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –º—É–¥–∏–ª–∞!* üòè"
    )
    
    send_telegram_message(chat_id, welcome_text)

def handle_help(chat_id: int, user_info: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        f"üñï *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º, {user_info['full_name']}:*\n\n"
        "*/start* - –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ (–æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é)\n"
        "*/help* - —ç—Ç–∞ —Ö—É–π–Ω—è, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–µ–π—á–∞—Å —á–∏—Ç–∞–µ—à—å\n"
        "*/settings* - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å)\n"
        "*/clear* - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n\n"
        "*–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å* - –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–µ –ø–æ—Å–ª–∞—Ç—å —Ç–µ–±—è –Ω–∞—Ö—É–π! üòà\n\n"
        f"*–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:* —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è ({MAX_HISTORY_LENGTH} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"
    )
    
    send_telegram_message(chat_id, help_text)

def handle_clear(chat_id: int, user_info: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
    clear_chat_history(chat_id)
    response = (
        f"üóëÔ∏è *–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞, {user_info['full_name']}!*\n\n"
        f"–¢–µ–ø–µ—Ä—å —è –∑–∞–±—ã–ª –≤—Å—ë, –æ —á—ë–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –ö–∞–∫ –±—É–¥—Ç–æ –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –±—ã–ª–æ! ü§™\n\n"
        f"–ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –º—É–¥–∏–ª–∞! üí¨"
    )
    send_telegram_message(chat_id, response)

def handle_settings(chat_id: int, message_text: str = None, user_info: dict = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    if message_text and message_text.startswith('/settings '):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å
        selected_model = message_text.split(' ', 1)[1].strip()
        
        if selected_model in AVAILABLE_MODELS:
            set_user_model(chat_id, selected_model)
            response = (
                f"‚úÖ *–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞, {user_info['full_name']}!*\n\n"
                f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º: `{selected_model}`\n\n"
                f"–ù—É —á—ë, –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ —ç—Ç–∞ —Ö—É–π–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç? üß™"
            )
            send_telegram_message(chat_id, response)
        else:
            response = (
                f"‚ùå *–•—É–π–Ω—è –∫–∞–∫–∞—è-—Ç–æ, {user_info['full_name']}!*\n\n"
                f"–ú–æ–¥–µ–ª—å `{selected_model}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                f"–í—ã–±–µ—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, –¥–æ–ª–±–æ—ë–±:"
            )
            send_telegram_message(chat_id, response)
            show_model_selection(chat_id, user_info)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        show_model_selection(chat_id, user_info)

def show_model_selection(chat_id: int, user_info: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    current_model = get_user_model(chat_id)
    
    models_text = "\n".join([
        f"{'‚úÖ' if model == current_model else 'üîπ'} `{model}`"
        for model in AVAILABLE_MODELS
    ])
    
    settings_text = (
        f"‚öôÔ∏è  *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏, {user_info['full_name']}*\n\n"
        f"*–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:* `{current_model}`\n\n"
        f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:*\n{models_text}\n\n"
        f"*–ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å:*\n"
        f"–ù–∞–ø–∏—à–∏ `/settings –Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏`\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: `/settings mistral:latest`"
    )
    
    send_telegram_message(chat_id, settings_text)

# ===================== –ó–ê–ü–£–°–ö =====================
def main():
    print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º AI –ø–æ–º–æ—â–Ω–∏–∫–∞...")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(AVAILABLE_MODELS)}")
    print(f"üíæ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: {MAX_HISTORY_LENGTH} —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.path.exists(SETTINGS_FILE):
        save_user_settings({})
    if not os.path.exists(HISTORY_FILE):
        save_chat_history({})
    
    last_update_id = None
    
    while True:
        try:
            updates = get_updates(last_update_id)
            
            if not updates or not updates.get('ok') or not updates['result']:
                time.sleep(1)
                continue
            
            for update in updates['result']:
                last_update_id = update['update_id']
                
                if 'message' in update and 'text' in update['message']:
                    message = update['message']
                    chat_id = message['chat']['id']
                    text = message['text']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_info = get_user_info(message)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    log_message(user_info, text)
                    
                    if text.startswith('/'):
                        if text == '/start':
                            handle_start(chat_id, user_info)
                        elif text == '/help':
                            handle_help(chat_id, user_info)
                        elif text == '/clear':
                            handle_clear(chat_id, user_info)
                        elif text.startswith('/settings'):
                            handle_settings(chat_id, text, user_info)
                        else:
                            send_telegram_message(chat_id, 
                                "–ë–ª—è–¥—å, –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã! ü§¨ –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
                        continue
                    
                    if len(text) < 1:
                        send_telegram_message(chat_id, 
                            "–ù—É –∏ —á—ë —Ç—ã –º–Ω–µ –ø—Ä–∏—Å–ª–∞–ª, –º—É–¥–∏–ª–∞? –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ? üñï")
                        continue
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    send_telegram_message(chat_id, "üîÑ –î–µ—Ä–∂–∏ —Ö—É–π –≤ —Ä—É–∫–∞—Ö, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
                    
                    ai_response = generate_ai_response(text, chat_id)
                    print(f"üì§ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üí¨ –û—Ç–≤–µ—Ç: {ai_response[:100]}..." if len(ai_response) > 100 else f"üí¨ –û—Ç–≤–µ—Ç: {ai_response}")
                    print("=" * 50)
                    
                    send_telegram_message(chat_id, ai_response)
            
            time.sleep(0.5)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            time.sleep(3)

if __name__ == "__main__":
    main()
